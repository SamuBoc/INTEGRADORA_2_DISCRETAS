class NodoGenerico:
    def __init__(self, valor):
        self.valor = valor

# TAD (Tipo Abstracto de Datos) para Grafo con Matriz de Adyacencia

# Definición de la clase GrafoMatriz
class GrafoMatriz:
    def __init__(self):
        self.nodos = []  # Lista de nodos
        self.matriz = []  # Matriz de adyacencia

    def agregar_nodo(self, valor):
        # Agregar un nuevo nodo al grafo
        nuevo_nodo = NodoGenerico(valor)
        self.nodos.append(nuevo_nodo)
        # Actualizar la matriz de adyacencia con una nueva fila y columna
        for fila in self.matriz:
            fila.append(False)
        nueva_fila = [False] * len(self.nodos)
        self.matriz.append(nueva_fila)

    def agregar_arista(self, valor_nodo1, valor_nodo2):
        # Agregar una arista entre los nodos con los valores especificados
        indice_nodo1 = self.nodos.index(NodoGenerico(valor_nodo1))
        indice_nodo2 = self.nodos.index(NodoGenerico(valor_nodo2))
        self.matriz[indice_nodo1][indice_nodo2] = True
        self.matriz[indice_nodo2][indice_nodo1] = True

    def eliminar_nodo(self, valor):
        # Eliminar un nodo con el valor especificado y las aristas relacionadas
        indice_nodo = self.nodos.index(NodoGenerico(valor))
        del self.nodos[indice_nodo]
        del self.matriz[indice_nodo]
        for fila in self.matriz:
            del fila[indice_nodo]

    def eliminar_arista(self, valor_nodo1, valor_nodo2):
        # Eliminar una arista entre los nodos con los valores especificados
        indice_nodo1 = self.nodos.index(NodoGenerico(valor_nodo1))
        indice_nodo2 = self.nodos.index(NodoGenerico(valor_nodo2))
        self.matriz[indice_nodo1][indice_nodo2] = False
        self.matriz[indice_nodo2][indice_nodo1] = False

    def existe_arista(self, valor_nodo1, valor_nodo2):
        # Comprobar si existe una arista entre los nodos con los valores especificados
        indice_nodo1 = self.nodos.index(NodoGenerico(valor_nodo1))
        indice_nodo2 = self.nodos.index(NodoGenerico(valor_nodo2))
        return self.matriz[indice_nodo1][indice_nodo2]








# TAD (Tipo Abstracto de Datos) para Grafo con Lista de Adyacencia

# Definición de la clase GrafoLista
class GrafoLista:
    def __init__(self):
        self.nodos = []  # Lista de nodos

    def agregar_nodo(self, valor):
        # Agregar un nuevo nodo al grafo
        nuevo_nodo = NodoGenerico(valor)
        self.nodos.append(nuevo_nodo)

    def agregar_arista(self, valor_nodo1, valor_nodo2):
        # Agregar una arista entre los nodos con los valores especificados
        nodo1 = next(nodo for nodo in self.nodos if nodo.valor == valor_nodo1)
        nodo2 = next(nodo for nodo in self.nodos if nodo.valor == valor_nodo2)
        nodo1.adyacentes.append(nodo2)
        nodo2.adyacentes.append(nodo1)

    def eliminar_nodo(self, valor):
        # Eliminar un nodo con el valor especificado y las aristas relacionadas
        nodo_eliminar = next(nodo for nodo in self.nodos if nodo.valor == valor)
        self.nodos.remove(nodo_eliminar)
        for nodo in self.nodos:
            if nodo_eliminar in nodo.adyacentes:
                nodo.adyacentes.remove(nodo_eliminar)

    def eliminar_arista(self, valor_nodo1, valor_nodo2):
        # Eliminar una arista entre los nodos con los valores especificados
        nodo1 = next(nodo for nodo in self.nodos if nodo.valor == valor_nodo1)
        nodo2 = next(nodo for nodo in self.nodos if nodo.valor == valor_nodo2)
        if nodo2 in nodo1.adyacentes:
            nodo1.adyacentes.remove(nodo2)
        if nodo1 in nodo2.adyacentes:
            nodo2.adyacentes.remove(nodo1)

    def existe_arista(self, valor_nodo1, valor_nodo2):
        # Comprobar si existe una arista entre los nodos con los valores especificados
        nodo1 = next(nodo for nodo in self.nodos if nodo.valor == valor_nodo1)
        nodo2 = next(nodo for nodo in self.nodos if nodo.valor == valor_nodo2)
        return nodo2 in nodo1.adyacentes

