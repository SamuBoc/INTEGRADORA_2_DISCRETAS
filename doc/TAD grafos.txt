TAD Grafo con Matriz de Adyacencia
GrafoMatrizAdyacencia:

Atributos:
size: data
matrizAdyacencia: data x data


CreateGraph(size): data -> GrafoMatrizAdyacencia
AddEdge(nodo1, nodo2, peso): GrafoMatrizAdyacencia x data x data x data -> void
RemoveEdge(nodo1, nodo2): GrafoMatrizAdyacencia x data x data -> void
HasEdge(nodo1, nodo2): GrafoMatrizAdyacencia x data x data -> boolean
GetSize(): GrafoMatrizAdyacencia -> data
ClearGraph(): GrafoMatrizAdyacencia -> void

Primitive Operations:

CreateGraph(size): data -> GrafoMatrizAdyacencia
“Crea un nuevo grafo con matriz de adyacencia”

{pre: size}

{pos: imprime la matriz de adyacencia del grafo}

AddEdge(nodo1, nodo2, peso): GrafoMatrizAdyacencia x data x data x data -> void
“Agrega una arista entre nodo1 y nodo2 con el peso especificado”

{pre: nodo1, nodo2, peso}

{pos: imprime la matriz de adyacencia actualizada}

RemoveEdge(nodo1, nodo2): GrafoMatrizAdyacencia x data x data -> void
“Elimina la arista entre nodo1 y nodo2”

{pre: nodo1, nodo2}

{pos: imprime la matriz de adyacencia actualizada}

HasEdge(nodo1, nodo2): GrafoMatrizAdyacencia x data x data -> boolean
“Verifica si hay una arista entre nodo1 y nodo2”

{pre: nodo1, nodo2}

{pos: imprime true si hay una arista, false de lo contrario}

GetSize(): GrafoMatrizAdyacencia -> data
“Obtiene el tamaño del grafo”

{pre:}

{pos: imprime el tamaño del grafo}

ClearGraph(): GrafoMatrizAdyacencia -> void
“Elimina todas las aristas del grafo”

{pre:}

{pos: imprime la matriz de adyacencia vacía}







# TAD (Tipo Abstracto de Datos) para Grafo con Lista de Adyacencia



GrafoListaAdyacencia:

Atributos:
size: data
listaAdyacencia: data x data

CreateGraph(size): data -> GrafoListaAdyacencia
AddEdge(nodo1, nodo2, peso): GrafoListaAdyacencia x data x data x data -> void
RemoveEdge(nodo1, nodo2): GrafoListaAdyacencia x data x data -> void
HasEdge(nodo1, nodo2): GrafoListaAdyacencia x data x data -> boolean
GetSize(): GrafoListaAdyacencia -> data
ClearGraph(): GrafoListaAdyacencia -> void



GrafoListaAdyacencia:

Atributos:
size: data
listaAdyacencia: data x data
Primitive Operations:

CreateGraph(size): data -> GrafoListaAdyacencia
“Crea un nuevo grafo con lista de adyacencia”

{pre: size}

{pos: imprime la lista de adyacencia del grafo}

AddEdge(nodo1, nodo2, peso): GrafoListaAdyacencia x data x data x data -> void
“Agrega una arista entre nodo1 y nodo2 con el peso especificado”

{pre: nodo1, nodo2, peso}

{pos: imprime la lista de adyacencia actualizada}

RemoveEdge(nodo1, nodo2): GrafoListaAdyacencia x data x data -> void
“Elimina la arista entre nodo1 y nodo2”

{pre: nodo1, nodo2}

{pos: imprime la lista de adyacencia actualizada}

HasEdge(nodo1, nodo2): GrafoListaAdyacencia x data x data -> boolean
“Verifica si hay una arista entre nodo1 y nodo2”

{pre: nodo1, nodo2}

{pos: imprime true si hay una arista, false de lo contrario}

GetSize(): GrafoListaAdyacencia -> data
“Obtiene el tamaño del grafo”

{pre:}

{pos: imprime el tamaño del grafo}

ClearGraph(): GrafoListaAdyacencia -> void
“Elimina todas las aristas del grafo”

{pre:}

{pos: imprime la lista de adyacencia vacía}

